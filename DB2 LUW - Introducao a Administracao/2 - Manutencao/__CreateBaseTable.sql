/#
CREATE PROCEDURE NULLID.ExecImmed (IN instrucao VARCHAR(1000))
LANGUAGE SQL
BEGIN    
    EXECUTE IMMEDIATE instrucao;
END
#/

GRANT EXECUTE ON PROCEDURE NULLID.ExecImmed TO PUBLIC;

/#
BEGIN ATOMIC

    IF ( 
        NOT EXISTS (
            SELECT S.*
            FROM SYSIBM.SYSSCHEMATA AS S
            WHERE NAME = UPPER('schDraft')
        )
    )
    THEN CALL NULLID.ExecImmed('CREATE SCHEMA schDraft');
    END IF;

END
#/
/#
BEGIN ATOMIC

    IF ( 
        EXISTS (
            SELECT *
            FROM SYSIBM.TABLES
            WHERE TABLE_NAME = UPPER('Tabela001')
                AND TABLE_SCHEMA = UPPER('schDraft')
                AND TABLE_TYPE = 'BASE TABLE') 
        ) 
    THEN CALL NULLID.ExecImmed('DROP TABLE schDraft.Tabela001');
    END IF;

END
#/

CREATE TABLE schDraft.Tabela001 (
    Codigo INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY
    , Nome VARCHAR(100) NOT NULL
    , DataRegistro TIMESTAMP WITH DEFAULT CURRENT TIMESTAMP
);

INSERT INTO schDraft.Tabela001 (Nome) VALUES ('DB2Geek');

-- SELECT * FROM schDraft.Tabela001;

/#
CREATE OR REPLACE PROCEDURE NullID.InsertData (IN firstNum INT DEFAULT 1, IN numRows INT DEFAULT 10)
LANGUAGE SQL
BEGIN
    WHILE (firstNum <= numRows) DO    
        INSERT INTO schDraft.Tabela001 (Nome) VALUES ('DB2Geek ' || CAST(firstNum AS VARCHAR(10)));
        SET firstNum = firstNum + 1;
    END WHILE;
END
#/

-- call NULLID.InsertData (numRows => 100);